//**** DB CONFIG ****//
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

//****  DB CONFIG END  ****//

//****** User Schema  *****//
enum Theme {
  light
  dark
  system
}

enum Role {
  STUDENT
  AUTHOR
  ADMIN
  MENTOR
  NOT_ENROLLED
  NA
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  phone         String?
  image         String?
  emailVerified DateTime?
  isActive      Boolean   @default(true)
  role          Role      @default(STUDENT)

  dateJoined           DateTime               @default(now())
  createdAt            DateTime               @default(now())
  CourseRegistration   CourseRegistration[]
  account              Account[]
  sessions             Session[]
  course               Course[]               @relation("userCourse")
  discussion           Discussion[]
  fromUserNotification Notification[]         @relation("fromUser")
  toUserNotification   Notification[]         @relation("toUser")
  CourseProgress       CourseProgress[]
  conversation         Conversation[]
  blogs                Blog[]
  orders               Order[]
  invoices             Invoice[]
  submissions          AssignmentSubmission[]
  evaluations          AssignmentEvaluation[]
  events               Events[]
  eventsRegistered     EventRegistration[]
}

//****** User Schema End ******//

//****** Account Schema ******//
model Account {
  id                 String  @id @default(cuid())
  userId             String
  password           String? @db.Text()
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text()
  access_token       String? @db.Text()
  expires_at         Int?
  token_type         String? @db.Text()
  scope              String? @db.Text()
  id_token           String? @db.Text()
  session_state      String?
  oauth_token_secret String?
  oauth_token        String? @db.Text()
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

//****** Account Schema End ******//

//****** Session Schema  ******//
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String
  expires      DateTime
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

//****** Session Schema End ******//

//****** VerificationToken Schema  ******//
model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//****** VerificationToken Schema End ******//

//****** Course Schema  ******//
enum CourseType {
  PAID
  FREE
}

enum StateType {
  ACTIVE
  INACTIVE
  DRAFT
}

enum courseDifficultyType {
  Beginner
  Intermediate
  Advance
}

model Course {
  courseId            Int         @id
  name                String
  about               String      @db.Text()
  description         String      @db.Text()
  slug                String?
  tvProviderId        String?
  tvProviderName      String?
  tvUrl               String?
  tvThumbnail         String?
  tvState             VideoState?
  icon                String?
  authorId            String
  skills              Json?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @default(now())
  courseType          CourseType  @default(FREE)
  certificateTemplate String?
  isActive            Boolean     @default(true)
  coursePrice         Float       @default(0)
  sequenceId          Int?
  previewMode         Boolean?

  expiryInDays     Int                  @default(365)
  difficultyLevel  courseDifficultyType @default(Beginner)
  durationInMonths Int                  @default(12)
  user             User                 @relation(name: "userCourse", fields: [authorId], references: [id])
  totalResources   Int                  @default(0)
  state            StateType            @default(DRAFT)
  chapters         Chapter[]
  product          Product              @relation(name: "course_product", fields: [courseId], references: [productId])

  courseProgress CourseProgress[]

  @@unique([slug])
  @@unique([courseId, name])
  @@index([authorId])
}

//****** Course Schema  End******//

//****** Chapter Schema  ******//
model Chapter {
  chapterId   Int        @id @default(autoincrement())
  courseId    Int
  objective   String?    @db.Text()
  name        String
  description String?    @db.Text()
  sequenceId  Int
  isActive    Boolean    @default(true)
  state       StateType  @default(DRAFT)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  course      Course     @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  resource    Resource[]

  @@unique([chapterId])
  @@index([courseId])
}

//****** Chapter Schema End******//

//****** Reource Schema  ******//
enum ResourceContentType {
  Video
  Assignment
}

model Resource {
  resourceId        Int                 @id @default(autoincrement())
  name              String
  description       String?             @db.Text()
  chapterId         Int
  sequenceId        Int
  contentType       ResourceContentType
  isActive          Boolean             @default(true)
  isStudentNotified Boolean             @default(false)
  state             StateType           @default(DRAFT)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  chapter           Chapter             @relation(fields: [chapterId], references: [chapterId], onDelete: Cascade)
  courseProgress    CourseProgress[]
  discussions       Discussion[]

  notifications Notification[]
  video         Video?
  assignment    Assignment?

  @@unique([resourceId])
  @@index([chapterId])
}

enum VideoState {
  PROCESSING
  FAILED
  READY
  UPLOADING
}

model Video {
  id              Int        @id @default(autoincrement())
  videoUrl        String     @db.VarChar(200)
  providerVideoId String?    @db.VarChar(500)
  videoDuration   Int
  resourceId      Int        @unique
  resource        Resource   @relation(fields: [resourceId], references: [resourceId], onDelete: Cascade)
  thumbnail       String     @db.VarChar(200)
  state           VideoState @default(PROCESSING)
  mediaProvider   String?
}

//****** Reource Schema End ******//

//****** CourseRegistration Schema  ******//
enum CourseState {
  ENROLLED
  STARTED
  COMPLETED
}

model CourseRegistration {
  registrationId Int                 @id @default(autoincrement())
  orderId        String              @unique
  studentId      String
  courseState    CourseState         @default(ENROLLED)
  courseType     CourseType          @default(FREE)
  image          String?
  isActive       Boolean             @default(true)
  dateJoined     DateTime            @default(now())
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  expireIn       DateTime?
  order          Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user           User                @relation(fields: [studentId], references: [id], onDelete: Cascade)
  certificate    CourseCertificates?

  @@unique([studentId, orderId])
  @@index([studentId])
}

//****** CourseRegistration Schema End******//

//****** CourseProgress Schema  ******//
model CourseProgress {
  courseProgressId Int      @id @default(autoincrement())
  courseId         Int
  resourceId       Int
  studentId        String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  resource         Resource @relation(fields: [resourceId], references: [resourceId], onDelete: Cascade)
  course           Course   @relation(fields: [courseId], references: [courseId], onDelete: Cascade)

  @@unique([studentId, resourceId])
  @@index([resourceId])
  @@index([courseId])
}

//****** Discussion Schema ******//
model Discussion {
  id                 Int            @unique @default(autoincrement()) @db.Int()
  userId             String
  resourceId         Int
  tagCommentId       Int?
  comment            String?        @db.MediumText
  attachedFiles      Json?
  parentCommentId    Int?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  resource           Resource       @relation(fields: [resourceId], references: [resourceId], onDelete: Cascade)
  tagCmtNotification Notification[] @relation(name: "tagComment")
  cmtNotification    Notification[] @relation(name: "comment")

  @@index([userId])
  @@index([resourceId])
}

//****** Discussion Schema End******//

//****** Notification Schema ******//
enum NotificationType {
  COMMENT
  EVALUATE_ASSIGNMENT
}

model Notification {
  id               Int              @unique @default(autoincrement()) @db.Int()
  notificationType NotificationType
  fromUserId       String
  resourceId       Int?
  toUserId         String
  title            String?
  description      String?
  tagCommentId     Int?
  commentId        Int?
  isView           Boolean          @default(false)
  tagComment       Discussion?      @relation(name: "tagComment", fields: [tagCommentId], references: [id], onDelete: Cascade)
  comment          Discussion?      @relation(name: "comment", fields: [commentId], references: [id], onDelete: Cascade)
  fromUser         User             @relation("fromUser", fields: [fromUserId], references: [id])
  toUser           User             @relation("toUser", fields: [toUserId], references: [id])
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  resource         Resource?        @relation(fields: [resourceId], references: [resourceId])

  @@index([fromUserId])
  @@index([toUserId])
  @@index([tagCommentId])
  @@index([commentId])
  @@index([resourceId])
}

//****   conversation table ****//

model Conversation {
  id                   Int      @unique @default(autoincrement()) @db.Int()
  authorId             String
  comment              String?  @db.Text
  attachedFiles        Json?
  isView               Boolean  @default(false)
  parentConversationId Int?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

//****** UserJoinWaiting Schema ******//
model UserJoinWaiting {
  id         Int      @default(autoincrement()) @db.Int()
  email      String
  ip         String?
  sequenceId Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@unique([id, email])
}

//****** UserJoinWaiting Schema End******//

enum ConfigurationState {
  INITIATED
  AUTHENTICATED
  VOD_CONFIGURED
  CDN_CONFIGURED
  STORAGE_CONFIGURED
  CMS_CONFIGURED
  PAYMENT_CONFIGURED
  EMAIL_CONFIGURED
}

enum ServiceType {
  CMS
  PAYMENTS
  EMAIL
}

model ServiceProvider {
  id             Int                @default(autoincrement()) @db.Int()
  service_type   ServiceType        @unique
  provider_name  String             @db.Text()
  providerDetail Json?
  state          ConfigurationState @default(INITIATED)
  dt_added       DateTime           @default(now())

  @@unique([id])
}

model CourseCertificates {
  id               String             @id @default(cuid())
  registrationId   Int                @unique
  imagePath        String?
  pdfPath          String?
  issueDate        DateTime           @default(now())
  RegisteredCourse CourseRegistration @relation(fields: [registrationId], references: [registrationId], onDelete: Cascade)
}

model CourseNotification {
  id              Int       @unique @default(autoincrement()) @db.Int()
  email           String
  courseId        Int
  createdAt       DateTime  @default(now())
  mailSent        Boolean
  mailSentDate    DateTime?
  isEmailVerified Boolean

  @@unique([email, courseId])
  @@index([email])
}

model Blog {
  id          String    @id @unique @default(cuid())
  authorId    String
  title       String
  slug        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  content     Json
  banner      String
  contentType String?
  state       StateType
  user        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

enum orderStatus {
  PENDING
  SUCCESS
  FAILED
  INITIATED
}

enum paymentStatus {
  SUCCESS
  FAILED
  USER_DROPPED
}

enum gatewayProvider {
  CASHFREE
  STRIPE
  RAZORPAY
  CASH
}

enum paymentMode {
  OFFLINE
  ONLINE
}

enum ProductType {
  COURSE
  EVENT
}

model Product {
  productId Int         @id @default(autoincrement())
  ptype     ProductType
  orders    Order[]
  course    Course?     @relation(name: "course_product")
}

model Order {
  id               String              @id @default(cuid())
  gatewayOrderId   String?             @unique
  orderStatus      orderStatus?
  paymentStatus    paymentStatus?
  studentId        String
  productId        Int
  currency         String?
  paymentMode      paymentMode         @default(ONLINE)
  amount           Int?
  paymentId        String?
  message          String?             @db.VarChar(500)
  paymentChannel   String?
  paymentTime      DateTime?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @default(now())
  paymentGateway   gatewayProvider?
  Invoice          Invoice?
  registeredCourse CourseRegistration?
  product          Product             @relation(fields: [productId], references: [productId], onDelete: Cascade)
  user             User                @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, productId])
  @@index([studentId, gatewayOrderId])
  @@index([productId])
}

model Invoice {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  studentId   String
  items       Json
  amountPaid  Int
  paidDate    DateTime
  taxRate     Int?
  taxIncluded Boolean  @default(false)
  pdfPath     String?  @db.VarChar(500)
  orderId     String   @unique
  user        User     @relation(fields: [studentId], references: [id])
  order       Order    @relation(fields: [orderId], references: [gatewayOrderId])

  @@index([studentId])
  @@index([orderId])
}

model Assignment {
  id                Int                    @id @unique @default(autoincrement())
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @default(now())
  lessonId          Int
  content           Json?
  submissionConfig  Json?
  estimatedDuration Int?
  maximumPoints     Int                    @default(10)
  passingScore      Int                    @default(8)
  lesson            Resource               @relation(fields: [lessonId], references: [resourceId], onDelete: Cascade)
  submission        AssignmentSubmission[]

  @@unique([lessonId])
  @@index([lessonId])
}

enum submissionStatus {
  PASSED
  COMPLETED
  PENDING
  FAILED
  NOT_SUBMITTED
}

model AssignmentSubmission {
  id           Int                   @id @default(autoincrement())
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @default(now())
  assignmentId Int
  lessonId     Int
  studentId    String
  content      Json?
  user         User                  @relation(fields: [studentId], references: [id])
  status       submissionStatus      @default(NOT_SUBMITTED)
  assignment   Assignment            @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  evaluation   AssignmentEvaluation?

  @@unique([id, studentId, assignmentId])
  @@index([assignmentId, studentId])
  @@index([studentId])
}

model AssignmentEvaluation {
  id           Int                  @id @default(autoincrement())
  assignmentId Int
  submissionId Int                  @unique
  authorId     String
  score        Int
  comment      Json
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @default(now())
  submission   AssignmentSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  user         User                 @relation(fields: [authorId], references: [id])

  @@unique([submissionId, assignmentId])
  @@index([submissionId, assignmentId])
  @@index([authorId])
}

enum EventType {
  WORKSHOP
  TALK
}

enum EventMode {
  ONLINE
  OFFLINE
}

model Events {
  id                  Int                 @id @default(autoincrement())
  title               String?             @unique
  banner              String?
  slug                String?             @unique
  description         String?             @db.MediumText()
  startTime           DateTime?
  endTime             DateTime?
  eventType           EventType?
  price               Int?
  eventInstructions   String?             @db.Text()
  location            String?
  certificate         Boolean             @default(false)
  certificateTemplate String?
  eventLink           String?
  eventMode           EventMode?
  registrationEndDate DateTime?
  state               StateType           @default(DRAFT)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @default(now())
  authorId            String
  user                User                @relation(fields: [authorId], references: [id])
  attendees           EventRegistration[]

  @@index([authorId])
}

enum EventAccess {
  ACCEPTED
  REJECTED
  PENDING
}

model EventRegistration {
  id                 Int         @id @default(autoincrement())
  name               String
  email              String
  studentId          String?
  phone              String
  eventId            Int
  attended           Boolean     @default(false)
  certificate        String?
  certificatePdfPath String?
  status             EventAccess @default(PENDING)
  comment            String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @default(now())
  user               User?       @relation(fields: [email], references: [email])
  event              Events      @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, email])
  @@index([email])
  @@index([eventId])
}

model SecretStore {
  name   String @id
  secret String @db.Text
  nonce  String
}
